{"version":3,"sources":["counterspell/core.cljs"],"mappings":"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","names":["counterspell.core/game-turns","counterspell.core/grid-size","counterspell.core/create-letter-generator","seed","alphabet","cljs.core.repeatedly","cljs.core/rand-nth","counterspell.core/letters","counterspell.core/generate-game-grid","height","width","flat-letters","cljs.core.take","build-starting-maps","letters","p1__18416#","cljs.core.map","cljs.core/PersistentHashMap","set-initial-visible","xs","cljs.core.concat","p1__18417#","cljs.core.assoc","cljs.core.drop","cljs.core.partition","counterspell.core/letter-grid","grid","iter__5480__auto__","s__18419","cljs.core/LazySeq","temp__5804__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__5478__auto__","size__5479__auto__","cljs.core/count","b__18421","cljs.core/chunk-buffer","i__18420","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__18418","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","col","s__18423","b__18425","i__18424","iter__18422","s__18427","b__18429","i__18428","iter__18426","letter","cljs.core.filter","cljs.core/reverse","counterspell.core/main","js/counterspell","js/counterspell.core","js/counterspell.core.root","counterspell.core/root","reagent.dom.client/create-root","js/document","counterspell.core/init","reagent.dom.client.render","cljs.core/chunk-first"],"sourcesContent":["(ns counterspell.core\n  (:require [reagent.dom.client :as rdom]))\n\n;; TODO: how many turns should the game be?\n(def game-turns 3)\n\n;; TODO: how big should the grid be?\n(def grid-size {:rows 5 :cols 4})\n\n;; TODO: figure out how to get seeds working\n(defn create-letter-generator [seed]\n  (let [alphabet \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"]\n    (repeatedly #(rand-nth alphabet))))\n\n(def letters (create-letter-generator nil))\n\n\n;; Gives us columns as a list of lists of maps.\n;; We'll render the columns bottom to top; that is, first item is lowest of the screen.\n;; TODO: could this function be less terrible?\n(defn generate-game-grid []\n  (let [height (* (grid-size :rows) (inc game-turns))\n        width (grid-size :cols)\n        flat-letters (take (* height width) letters)\n        build-starting-maps (fn [letters]\n                              (map #(hash-map :letter % :visible false) letters))\n        set-initial-visible (fn [xs]\n                              (concat\n                               (map #(assoc % :visible true) (take (grid-size :rows) xs))\n                               (drop (grid-size :rows) xs)))]\n\n    (->> flat-letters\n         (partition height)\n         (map build-starting-maps)\n         (map set-initial-visible))))\n\n\n(defn letter-grid []\n  ;; TODO: the grid probably wants to be a ratom\n  (let [grid (generate-game-grid)]\n    [:div.letter-grid\n     (for [col grid]\n       [:div.column\n        (for [letter (->> col (filter :visible) reverse)]\n          [:div.letter (:letter letter)])])]))\n\n(defn main []\n  [:div\n   [:h1 \"Counterspell!!!\"]\n   [letter-grid]])\n\n(defonce root (rdom/create-root (.querySelector js/document \"#root\")))\n\n(defn\n  ^:dev/after-load\n  init\n  []\n  (rdom/render root [main]))\n"]}