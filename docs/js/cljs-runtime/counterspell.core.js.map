{"version":3,"sources":["counterspell/core.cljs"],"mappings":"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","names":["counterspell.core/index","coll","cljs.core.map_indexed","cljs.core/vector","counterspell.core/game-turns","counterspell.core/grid-rows","counterspell.core/grid-cols","counterspell.core/create-letter-generator","seed","alphabet","cljs.core.repeatedly","cljs.core/rand-nth","counterspell.core/letters","counterspell.core/generate-game-grid","height","flat-letters","cljs.core.take","cljs.core.partition","counterspell.core/state","reagent.core.atom","counterspell.core/tile-active?","x","y","p1__21547#","cljs.core/some","cljs.core._EQ_","fexpr__21548","cljs.core/deref","counterspell.core/tiles-to-string","tiles","grid","cljs.core.apply","cljs.core/str","cljs.core.map","p__21549","vec__21550","cljs.core.nth","counterspell.core/submit-word!","cljs.core.swap_BANG_","s","word","cljs.core.assoc","counterspell.core/legal-tiles","tail","cljs.core/last","fexpr__21553","vec__21554","iter__5480__auto__","s__21558","cljs.core/LazySeq","temp__5804__auto__","cljs.core/seq","xs__6360__auto__","cljs.core/first","iterys__5476__auto__","s__21560","cljs.core/chunked-seq?","c__5478__auto__","size__5479__auto__","cljs.core/count","b__21562","cljs.core/chunk-buffer","i__21561","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__21559","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","fs__5477__auto__","cljs.core.concat","iter__21557","x'","cljs.core.range","y'","cljs.core/not","cljs.core/set","cljs.core.disj","s__21564","s__21566","b__21568","i__21567","iter__21565","iter__21563","counterspell.core/tile-action-at!","active-tiles","fexpr__21574","cljs.core/assoc","cljs.core.conj","p1__21571#","cljs.core.take_while","cljs.core.into","G__21576","fexpr__21575","p__21577","map__21578","cljs.core/--destructure-map","cljs.core.get","counterspell.core/letter-tile","letter","activated?","counterspell.core/letter-grid","s__21580","b__21582","i__21581","vec__21583","iter__21579","vec__21596","col","letters","s__21587","b__21589","i__21588","vec__21590","iter__21586","vec__21593","s__21600","b__21602","i__21601","vec__21603","iter__21599","vec__21606","l","counterspell.core/building-word","fexpr__21609","fexpr__21610","counterspell.core/submitted-words","fexpr__21611","and__5000__auto__","cljs.core/empty?","fexpr__21612","counterspell.core/main","js/counterspell","js/counterspell.core","js/counterspell.core.root","counterspell.core/root","reagent.dom.client/create-root","js/document","counterspell.core/init","reagent.dom.client.render","cljs.core/chunk-first"],"sourcesContent":["(ns counterspell.core\n  (:require [reagent.dom.client :as rdom]\n            [reagent.core :as r]))\n\n(defn index [coll] (map-indexed vector coll))\n\n\n;; TODO: how many turns should the game be?\n;; TODO: how big should the grid be?\n(def game-turns 3)\n(def grid-rows 5)\n(def grid-cols 4)\n\n;; TODO: figure out how to get seeds working\n(defn create-letter-generator [seed]\n  (let [alphabet \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"]\n    (repeatedly #(rand-nth alphabet))))\n\n(def letters (create-letter-generator nil))\n\n;; Gives us columns as a list of lists of letters\n;; We'll render the columns bottom to top; that is, first item is lowest of the screen.\n(defn generate-game-grid []\n  (let [height (* grid-rows (inc game-turns))\n        flat-letters (take (* height grid-cols) letters)]\n    (->> flat-letters\n         (partition height))))\n\n\n(def state (r/atom {:grid (generate-game-grid)\n                    :active-tiles []\n                    :last-submitted-word nil}))\n\n(defn tile-active? [x y]\n  (some #(= % [x y]) (@state :active-tiles)))\n\n(defn tiles-to-string [tiles grid]\n  (apply str (map (fn [[x y]]\n                    (nth (nth grid x) y))\n                  tiles)))\n\n(defn submit-word! [tiles]\n  (swap! state (fn [s]\n                 (let [word (tiles-to-string tiles (s :grid))]\n                   (-> s\n                       (assoc :last-submitted-word word)\n                       (assoc :active-tiles []))))))\n\n(defn legal-tiles []\n  (let [tail (last (@state :active-tiles))]\n    (if tail\n      ;; if we have an active selection, legal tiles are any inactive tiles adjacent to the tail\n      (let [[x y] tail]\n        (-> (for [x' (range (dec x) (+ 2 x))\n                  y' (range (dec y) (+ 2 y))]\n              (when (and (not (tile-active? x' y'))\n                         (<= 0 x')\n                         (<= 0 y')\n                         (< x' grid-cols)\n                         (< y' grid-rows))\n                [x' y']))\n            set\n            (disj nil)))\n      ;; if there is no selection, any tile is a legal move\n      (-> (for [x (range grid-cols)\n                y (range grid-rows)]\n            [x y])\n          set))))\n\n(defn tile-action-at! [x y]\n  \"takes coords of a clicked tile and figures out what to do with it: update active selection and maybe submit a word.\"\n  (let [active-tiles (@state :active-tiles)]\n    (if (tile-active? x y)\n      (if (= [x y] (last active-tiles))\n        ;; if you click the last tile twice, submit it as a word\n        (submit-word! active-tiles)\n        ;; if you click the active chain somewhere in its middle, deselect anything past that\n        (swap! state assoc :active-tiles\n               (conj (->> active-tiles\n                          (take-while #(not (= % [x y])))\n                          (into []))\n                     [x y])))\n      (if ((legal-tiles) [x y])\n        ;; if this tile is inactive and valid, activate it!\n        (swap! state assoc :active-tiles\n               (conj active-tiles [x y]))\n        ;; if you click an invalid inactive tile, reset the selection\n        (swap! state assoc :active-tiles\n               [])))))\n\n;;\n;; ui components\n;;\n(defn letter-tile [{:keys [letter x y]}]\n  (let [activated? (tile-active? x y)]\n    [:div.letter {:class (when activated? \"active\")\n                  :on-click #(tile-action-at! x y)}\n     letter]))\n\n(defn letter-grid []\n  (let [grid (:grid @state)]\n    [:div.letter-grid\n     (for [[x col] (index grid)]\n       (let [letters (take grid-rows col)]\n         [:div.column {:key x}\n          (for [[y l] (index letters)]\n            [letter-tile {:letter l :x x :y y\n                          :key (str l x y)}])]))]))\n\n(defn building-word []\n  (let [word (tiles-to-string (@state :active-tiles) (@state :grid))]\n    [:div.building-word\n     [:h3 word]]))\n\n(defn submitted-words []\n  (let [word (@state :last-submitted-word)]\n    (when (and (empty? (@state :active-tiles)) word)\n      [:div.submitted-word\n       [:h3 (str word \" is a word!\")]])))\n\n(defn main []\n  [:div\n   [:h1 \"Counterspell!!!\"]\n   [letter-grid]\n   [building-word]\n   [submitted-words]])\n\n(defonce root (rdom/create-root (.querySelector js/document \"#root\")))\n\n(defn\n  ^:dev/after-load\n  init\n  []\n  (rdom/render root [main]))\n"]}