{"version":3,"sources":["counterspell/core.cljs"],"mappings":"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","names":["counterspell.core/with-index","coll","cljs.core.map_indexed","cljs.core/vector","counterspell.core/tiles-to-string","tiles","cljs.core.apply","cljs.core/str","cljs.core.map","counterspell.core/game-turns","counterspell.core/grid-rows","counterspell.core/grid-cols","counterspell.core/tile-states","counterspell.core/game-states","p__27386","vec__27387","cljs.core.nth","counterspell.core/neighbors","x","y","iter__5480__auto__","s__27391","cljs.core/LazySeq","temp__5804__auto__","cljs.core/seq","xs__6360__auto__","cljs.core/first","iterys__5476__auto__","s__27393","cljs.core/chunked-seq?","c__5478__auto__","size__5479__auto__","cljs.core/count","b__27395","cljs.core/chunk-buffer","i__27394","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__27392","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","fs__5477__auto__","cljs.core.concat","iter__27390","x'","cljs.core.range","y'","cljs.core._EQ_","cljs.core/set","cljs.core.disj","counterspell.core/random-letter-generator","seed","alphabet","cljs.core.repeatedly","cljs.core/rand-nth","counterspell.core/generate-game-grid","random-seed","height","cljs.core.take","cljs.core.partition","cljs.core.mapv","letters","letter","full-grid","starters","p1__27396#","cljs.core.into","reserve","p1__27397#","cljs.core.drop","counterspell.core/state","reagent.core.atom","p__27399","map__27400","cljs.core/--destructure-map","cljs.core.get","counterspell.core/is-selected?","p1__27398#","cljs.core/some","fexpr__27401","cljs.core/deref","counterspell.core/is-legal-selection?","temp__5802__auto__","tail","cljs.core/last","fexpr__27402","G__27404","fexpr__27403","counterspell.core/remove-selected-spaces-from-grid","grid","selected","p__27405","vec__27406","col","cljs.core/second","cljs.core.remove","p__27409","vec__27410","tile","G__27413","counterspell.core/add-tiles-from-reserve","removed","by-col","cljs.core/group-by","s__27416","b__27418","i__27417","iter__27415","needed","extras","p1__27414#","cljs.core.assoc","counterspell.core/remove-tiles-from-reserve","s__27420","b__27422","i__27421","iter__27419","used","counterspell.core/after-advancing-turn!","cljs.core.println","fexpr__27424","cljs.core.swap_BANG_","cljs.core/assoc","old","p1__27423#","cljs.core.partial","cljs.core/mapv","counterspell.core/after-submitting-word!","gone","p1__27425#","cljs.core/PersistentVector","fexpr__27426","cljs.core.update","js/setTimeout","counterspell.core/submit-word!","maybe-word","fexpr__27427","counterspell.words/words","cljs.core/conj","p__27429","map__27430","counterspell.core/tile-action!","selected-grid-space","fexpr__27431","fexpr__27432","new-selected","cljs.core.conj","p1__27428#","cljs.core.take_while","counterspell.core/main","s__27434","b__27436","i__27435","vec__27437","iter__27433","vec__27450","grid-x","fexpr__27463","s__27441","b__27443","i__27442","vec__27444","iter__27440","vec__27447","s__27454","b__27456","i__27455","vec__27457","iter__27453","vec__27460","grid-y","counterspell.core/letter-tile","counterspell.core/word-in-progress","counterspell.core/found-words","p__27464","map__27465","cljs.core.merge","fexpr__27466","fexpr__27467","fexpr__27468","fexpr__27469","s__27471","b__27473","i__27472","iter__27470","word","fexpr__27474","fexpr__27475","js/counterspell","js/counterspell.core","js/counterspell.core.root","counterspell.core/root","reagent.dom.client/create-root","js/document","counterspell.core/init","reagent.dom.client.render","cljs.core/chunk-first"],"sourcesContent":["(ns counterspell.core\n  (:require [reagent.dom.client :as rdom]\n            [reagent.core :as r]\n            [counterspell.words :refer [words]]))\n\n;;\n;; generic helpers\n;;\n(defn with-index [coll] (map-indexed vector coll))\n(defn tiles-to-string [tiles] (apply str (map :letter tiles)))\n\n\n\n;;\n;; initial game data\n;;\n(def game-turns 3)\n;; TODO: how big should the grid be?\n(def grid-rows 10)\n(def grid-cols 8)\n\n(def tile-states #{:default :falling-in})\n(def game-states #{:selecting-tiles :submitting-word :advancing-turn :scoring})\n\n\n(defn neighbors [[x y]]\n  (->\n   (for [x' (range (dec x) (+ 2 x))\n         y' (range (dec y) (+ 2 y))]\n     (when (and (not (= [x y] [x' y']))\n                (<= 0 x')\n                (<= 0 y')\n                (< x' grid-cols)\n                (< y' grid-rows))\n       [x' y']))\n   set\n   (disj nil)))\n\n\n;; TODO: get seeds working for replayability/shareability\n(defn random-letter-generator [seed]\n  (let [alphabet \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"]\n    (repeatedly #(rand-nth alphabet))))\n\n\n(defn generate-game-grid [random-seed]\n  (let [height (* grid-rows (inc game-turns))]\n    (->> (random-letter-generator random-seed)\n         (take (* height grid-cols))\n         (partition height)\n         (mapv (fn [letters]\n                 (mapv (fn [letter]\n                         {:letter letter\n                          :state :default}) letters))))))\n\n(let [full-grid (generate-game-grid nil)\n      starters (mapv #(into [] (take grid-rows %)) full-grid)\n      reserve (mapv #(into [] (drop grid-rows %)) full-grid)]\n  (def state (r/atom {:grid starters\n                      :reserve-grid reserve\n                      :game-state :selecting-tiles\n                      :selected-grid-spaces []\n                      :bad-guess? false\n                      :found-words []})))\n\n\n;;\n;; game actions\n;;\n(defn is-selected? [{:keys [x y]}]\n  (some #(and (= x (% :x)) (= y (% :y))) (@state :selected-grid-spaces)))\n\n\n(defn is-legal-selection? [x y]\n  ;; NOTE: this currently assumes the space in question is deselected, because that's handled\n  ;;       further up the chain in tile-action! need to backfill that rule if this function\n  ;;       is to be used in any other context.\n  (if-let [tail (last (@state :selected-grid-spaces))]\n    ((neighbors [(tail :x) (tail :y)]) [x y])\n\n    ;; any space is legal if there are no current selections\n    true))\n\n\n(defn remove-selected-spaces-from-grid [grid selected]\n  (mapv (fn [[x col]]\n          (mapv second\n                (remove (fn [[y tile]]\n                          (selected [x y]))\n                        (with-index col))))\n        (with-index grid)))\n\n(defn add-tiles-from-reserve [grid reserve removed]\n  (let [by-col (group-by first removed)]\n    (for [x (range grid-cols)]\n      (let [col (nth grid x)\n            needed (count (by-col x))\n            extras (take needed (nth reserve x))]\n        (into []\n              (concat col\n                      (map #(assoc % :state :falling-in) extras)))))))\n\n(defn remove-tiles-from-reserve [reserve removed]\n  (let [by-col (group-by first removed)]\n    (for [x (range grid-cols)]\n      (let [col (nth reserve x)\n            used (count (by-col x))]\n        (drop used col)))))\n\n\n;; NOTE: this should be called only on a setTimeout, as a next step action after post-word-submit grid update\n(defn after-advancing-turn! []\n  (println \"donk\")\n  (if (= game-turns (count (@state :found-words)))\n    (swap! state assoc :game-state :scoring)\n\n    (swap! state (fn [old]\n                   (-> old\n                       (assoc :game-state :selecting-tiles)\n                       (assoc :grid (mapv (partial mapv #(assoc % :state :default)) (old :grid))))))))\n\n\n\n;; NOTE: this should be called only on a setTimeout, as a next step action after word submit\n(defn after-submitting-word! []\n  (do\n    (swap! state (fn [old]\n                   (let [gone (into #{} (map #(vector (% :x) (% :y)) (@state :selected-grid-spaces)))]\n                     (-> old\n                         (assoc :grid (-> (old :grid)\n                                          (remove-selected-spaces-from-grid gone)\n                                          (add-tiles-from-reserve (old :reserve-grid) gone)))\n                         (assoc :game-state :advancing-turn)\n                         (assoc :selected-grid-spaces [])\n                         (update :reserve-grid remove-tiles-from-reserve gone)))))\n    (js/setTimeout after-advancing-turn! 600)))\n\n\n\n(defn submit-word! []\n  (let [maybe-word (.toLowerCase (tiles-to-string (@state :selected-grid-spaces)))]\n    (if (words maybe-word)\n      (do\n        (swap! state (fn [old]\n                       (-> old\n                           (update :found-words conj maybe-word)\n                           (assoc :game-state :submitting-word))))\n        (js/setTimeout after-submitting-word! 470))\n\n      (swap! state assoc :bad-guess? true))))\n\n\n(defn tile-action! [{:keys [x y tile]}]\n  (let [selected-grid-space {:x x :y y :letter (tile :letter)}]\n    (when (= :selecting-tiles (@state :game-state))\n      (if (is-selected? selected-grid-space)\n        (if (= selected-grid-space (last (@state :selected-grid-spaces)))\n\n          ;; if you click the last selected tile again, submit the word\n          (submit-word!)\n\n          ;; if you click a selected tile in the middle of the chain, revert selection to it\n          (swap! state (fn [old]\n                         (let [new-selected (conj (->> (old :selected-grid-spaces)\n                                                       (take-while #(not (= % selected-grid-space)))\n                                                       (into []))\n                                                  selected-grid-space)]\n                           (assoc old :selected-grid-spaces new-selected\n                                  :bad-guess? false)))))\n\n        (if (is-legal-selection? x y)\n\n          ;; if you click an unselected tile, select it if it's a valid selection!\n          (swap! state (fn [old]\n                         (assoc old\n                                :selected-grid-spaces\n                                (conj (old :selected-grid-spaces) selected-grid-space)\n                                :bad-guess? false)))\n\n          ;; if you click an unselected tile that's *not* a valid selection, deselect all!\n          (swap! state assoc :selected-grid-spaces [] :bad-guess? false))))))\n\n\n;;\n;; UI components\n;;\n\n(declare letter-tile)\n(declare word-in-progress)\n(declare found-words)\n\n\n(defn main []\n  [:div\n   [:h1 \"Counterspell!!!\"]\n   [:div {:style {:display \"flex\"\n                  :flex-direction \"row\"}}\n    [:div\n     [:div {:comment \"the letter grid\"\n            :style {:display \"flex\"}}\n      (for [[grid-x col] (with-index (@state :grid))]\n        [:div {:comment \"one column of tiles\"\n               :key grid-x\n               :style {:background \"blue\"\n                       :display \"flex\"\n                       :flex-direction \"column-reverse\"\n                       :align-items \"center\"}}\n         (for [[grid-y tile] (with-index col)]\n           [letter-tile {:key grid-y\n                         :tile tile\n                         :grid-x grid-x\n                         :grid-y grid-y}])])]\n     [word-in-progress]]\n    [found-words]]])\n\n\n(defn letter-tile [{:keys [tile grid-x grid-y]}]\n  [:div {:comment \"a single letter tile\"\n         :class \"letter-tile\"\n         :style (merge {:padding \"1rem\"\n                        :width \"100%\"}\n                       (if (is-selected? {:x grid-x :y grid-y})\n                         {:border \"1px solid red\"\n                          :background-color \"#fbb\"\n                          :animation (when (= :submitting-word (@state :game-state))\n                                       \"fade-out forwards 0.5s\")}\n                         {:border \"1px solid black\"})\n                       (when (and (= :falling-in (tile :state))\n                                  (= :advancing-turn (@state :game-state)))\n                         {:animation \"0.5s forwards fall-in\"}))\n         :on-click #(tile-action! {:x grid-x :y grid-y :tile tile})}\n   (tile :letter)])\n\n\n(defn word-in-progress []\n  (let [maybe-word (tiles-to-string (@state :selected-grid-spaces))]\n    [:div {:comment \"the currently-being-spelled word\"\n           :style {:padding \"1rem\"\n                   :font-size \"200%\"}\n           :class (when (@state :bad-guess?) \"naughty\")}\n     [:h2 maybe-word]]))\n\n\n(defn found-words []\n  [:div {:style {:margin-left \"1rem\"}}\n   [:h2 \"Found words:\"]\n   [:ul\n    (for [word (@state :found-words)]\n      [:li word])]\n   (when (= :scoring (@state :game-state))\n     [:hr]\n     [:h2 \"Final score:\"]\n     [:p \"good job\"])])\n\n\n(defonce root (rdom/create-root (.querySelector js/document \"#root\")))\n\n(defn\n  ^:dev/after-load\n  init\n  []\n  (rdom/render root [main]))\n"]}