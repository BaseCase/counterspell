{"version":3,"sources":["counterspell/core.cljs"],"mappings":"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","names":["counterspell.core/with-index","coll","cljs.core.map_indexed","cljs.core/vector","counterspell.core/tiles-to-string","tiles","cljs.core.apply","cljs.core/str","cljs.core.map","counterspell.core/letter-at","grid","x","y","cljs.core.get_in","counterspell.core/letter-values","counterspell.core/score-word","word","cljs.core/+","counterspell.core/game-turns","counterspell.core/grid-rows","counterspell.core/grid-cols","counterspell.core/tile-states","counterspell.core/game-states","p__24893","vec__24894","cljs.core.nth","counterspell.core/neighbors","iter__5480__auto__","s__24898","cljs.core/LazySeq","temp__5804__auto__","cljs.core/seq","xs__6360__auto__","cljs.core/first","iterys__5476__auto__","s__24900","cljs.core/chunked-seq?","c__5478__auto__","size__5479__auto__","cljs.core/count","b__24902","cljs.core/chunk-buffer","i__24901","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__24899","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","fs__5477__auto__","cljs.core.concat","iter__24897","x'","cljs.core.range","y'","cljs.core._EQ_","cljs.core/set","cljs.core.disj","counterspell.core/random-letter-generator","seed","alphabet","cljs.core/clj->js","generator","js/module$vendor$jsrand","cljs.core.repeatedly","counterspell.core/generate-game-grid","random-seed","height","cljs.core.take","cljs.core.partition","cljs.core.mapv","letters","letter","counterspell.core/init-game","full-grid","starters","p1__24903#","cljs.core.into","reserve","p1__24904#","cljs.core.drop","counterspell.core/state","reagent.core.atom","p__24906","map__24907","cljs.core/--destructure-map","cljs.core.get","counterspell.core/is-selected?","p1__24905#","cljs.core/some","fexpr__24908","cljs.core/deref","counterspell.core/is-legal-selection?","temp__5802__auto__","tail","cljs.core/last","fexpr__24909","G__24911","fexpr__24910","counterspell.core/remove-selected-spaces-from-grid","selected","p__24912","vec__24913","col","cljs.core/second","cljs.core.remove","p__24916","vec__24917","tile","G__24920","counterspell.core/add-tiles-from-reserve","removed","by-col","cljs.core/group-by","s__24923","b__24925","i__24924","iter__24922","needed","extras","p1__24921#","cljs.core.assoc","counterspell.core/remove-tiles-from-reserve","s__24927","b__24929","i__24928","iter__24926","used","counterspell.core/words-by-first-letter","counterspell.words/words","p__24930","vec__24931","k","v","counterspell.core/path-to-word","path","p1__24934#","fexpr__24935","counterspell.core/words-reachable-from","words","G__24938","fexpr__24939","words-vec","cljs.core/vec","to-check","found-words","cljs.core/empty?","word-so-far","partial-word-re","cljs.core/re-pattern","is-full-word?","is-partial-word?","p1__24936#","cljs.core/re-find","unchecked-neighbors","cljs.core/disj","potential-paths","p1__24937#","cljs.core.conj","cljs.core/conj","cljs.core/pop","counterspell.core/run-scoring!","longest-paths-from-each-tile","s__24942","s__24944","b__24946","i__24945","iter__24943","iter__24941","cljs.core.sort_by","cljs.core/>","longest-words-with-paths","cljs.core/nil?","p1__24940#","cljs.core/PersistentVector","cljs.core.swap_BANG_","cljs.core/assoc","counterspell.core/after-advancing-turn!","fexpr__24948","js/setTimeout","old","p1__24947#","cljs.core.partial","cljs.core/mapv","counterspell.core/after-submitting-word!","gone","p1__24949#","fexpr__24950","cljs.core.update","counterspell.core/submit-word!","maybe-word","fexpr__24951","p__24953","map__24954","counterspell.core/tile-action!","selected-grid-space","fexpr__24955","fexpr__24956","new-selected","p1__24952#","cljs.core.take_while","counterspell.core/main","fexpr__24958","s__24960","b__24962","i__24961","vec__24963","iter__24959","vec__24976","grid-x","fexpr__24989","s__24967","b__24969","i__24968","vec__24970","iter__24966","vec__24973","s__24980","b__24982","i__24981","vec__24983","iter__24979","vec__24986","grid-y","counterspell.core/letter-tile","counterspell.core/word-in-progress","counterspell.core/found-words","p__24990","map__24991","cljs.core.merge","fexpr__24992","fexpr__24993","fexpr__24994","fexpr__24995","s__24997","b__24999","i__24998","iter__24996","fexpr__25000","fexpr__25001","fexpr__25002","s__25004","b__25006","i__25005","iter__25003","fexpr__25007","fexpr__25008","js/location","js/location.hash","js/counterspell","js/counterspell.core","js/counterspell.core.root","counterspell.core/root","reagent.dom.client/create-root","js/document","counterspell.core/init","url-seed","cljs.core/parse-long","or__5002__auto__","cljs.core/rand-int","reagent.dom.client.render","cljs.core/chunk-first"],"sourcesContent":["(ns counterspell.core\n  (:require [reagent.dom.client :as rdom]\n            [reagent.core :as r]\n            [counterspell.words :refer [words]]\n            [\"/vendor/jsrand\" :as jsrand]))\n\n;;\n;; generic helpers\n;;\n(defn with-index [coll] (map-indexed vector coll))\n(defn tiles-to-string [tiles] (apply str (map :letter tiles)))\n(defn letter-at [grid x y] (:letter (get-in grid [x y])))\n\n(def letter-values\n  {\"a\" 1\n   \"b\" 3\n   \"c\" 3\n   \"d\" 2\n   \"e\" 1\n   \"f\" 4\n   \"g\" 2\n   \"h\" 4\n   \"i\" 1\n   \"j\" 8\n   \"k\" 5\n   \"l\" 1\n   \"m\" 3\n   \"n\" 1\n   \"o\" 1\n   \"p\" 3\n   \"q\" 10\n   \"r\" 1\n   \"s\" 1\n   \"t\" 1\n   \"u\" 1\n   \"v\" 4\n   \"w\" 4\n   \"x\" 8\n   \"y\" 4\n   \"z\" 10})\n\n(defn score-word [word]\n  (->> word\n       (map letter-values)\n       (apply +)))\n\n\n;;\n;; initial game data\n;;\n(def game-turns 3)\n;; TODO: how big should the grid be?\n(def grid-rows 7)\n(def grid-cols 6)\n\n(def tile-states #{:default :falling-in})\n(def game-states #{:selecting-tiles :submitting-word :advancing-turn :scoring})\n\n\n(defn neighbors [[x y]]\n  (->\n   (for [x' (range (dec x) (+ 2 x))\n         y' (range (dec y) (+ 2 y))]\n     (when (and (not (= [x y] [x' y']))\n                (<= 0 x')\n                (<= 0 y')\n                (< x' grid-cols)\n                (< y' grid-rows))\n       [x' y']))\n   set\n   (disj nil)))\n\n\n(defn random-letter-generator [seed]\n  (let [alphabet (clj->js \"abcdefghijklmnopqrstuvwxyz\")\n        generator (new jsrand seed)]\n    (repeatedly #(.choice generator alphabet))))\n\n\n(defn generate-game-grid [random-seed]\n  (let [height (* grid-rows (inc game-turns))]\n    (->> (random-letter-generator random-seed)\n         (take (* height grid-cols))\n         (partition height)\n         (mapv (fn [letters]\n                 (mapv (fn [letter]\n                         {:letter letter\n                          :state :default}) letters))))))\n\n\n(defn init-game [random-seed]\n  (let [full-grid (generate-game-grid random-seed)\n        starters (mapv #(into [] (take grid-rows %)) full-grid)\n        reserve (mapv #(into [] (drop grid-rows %)) full-grid)]\n    (def state (r/atom {:grid starters\n                        :random-seed random-seed\n                        :reserve-grid reserve\n                        :game-state :selecting-tiles\n                        :selected-grid-spaces []\n                        :bad-guess? false\n                        :remaining-words []\n                        :found-words []}))))\n\n\n;;\n;; game actions\n;;\n(defn is-selected? [{:keys [x y]}]\n  (some #(and (= x (% :x)) (= y (% :y))) (@state :selected-grid-spaces)))\n\n\n(defn is-legal-selection? [x y]\n  ;; NOTE: this currently assumes the space in question is deselected, because that's handled\n  ;;       further up the chain in tile-action! need to backfill that rule if this function\n  ;;       is to be used in any other context.\n  (if-let [tail (last (@state :selected-grid-spaces))]\n    ((neighbors [(tail :x) (tail :y)]) [x y])\n\n    ;; any space is legal if there are no current selections\n    true))\n\n\n(defn remove-selected-spaces-from-grid [grid selected]\n  (mapv (fn [[x col]]\n          (mapv second\n                (remove (fn [[y tile]]\n                          (selected [x y]))\n                        (with-index col))))\n        (with-index grid)))\n\n\n(defn add-tiles-from-reserve [grid reserve removed]\n  (into []\n        (let [by-col (group-by first removed)]\n          (for [x (range grid-cols)]\n            (let [col (nth grid x)\n                  needed (count (by-col x))\n                  extras (take needed (nth reserve x))]\n              (into []\n                    (concat col\n                            (map #(assoc % :state :falling-in) extras))))))))\n\n(defn remove-tiles-from-reserve [reserve removed]\n  (let [by-col (group-by first removed)]\n    (for [x (range grid-cols)]\n      (let [col (nth reserve x)\n            used (count (by-col x))]\n        (drop used col)))))\n\n\n\n;;\n;; scoring\n;;\n\n(def words-by-first-letter\n  (->> words\n       (group-by first)\n       (map (fn [[k v]] [k (set v)]))\n       (into {})))\n\n(defn path-to-word [path]\n  (apply str (map #(letter-at (@state :grid) (% 0) (% 1)) path)))\n\n\n;; 0. push our starting point onto the to-check queue\n;; while the queue is not empty:\n;;   1. pop a path from the to-check queue\n;;   2. is our path to this point a full word?\n;;      2a. if yes, push that into our \"found words paths\" set. continue on regardless.\n;;   3. is our path to this point a partial word?\n;;      3a. if no, continue on to next entry of queue\n;;      3b. if yes:\n;;        4. look at all neighbors of path's tail\n;;        5. subtract neighbors that are in our path already\n;;        6. put these possible paths on our list of paths to check\n;; finally, return the longest guy in the \"found words paths\" list\n(defn words-reachable-from [x y]\n  (let [words (words-by-first-letter (:letter (get-in (@state :grid) [x y])))\n        words-vec (vec words)]\n    (loop [to-check [[[x y]]]  ;; a queue (vector) of vectors of grid points, each one representing a path through the grid\n           found-words []]\n      (if (empty? to-check)\n        found-words\n        (let [path (last to-check)\n              word-so-far (path-to-word path)\n              partial-word-re (re-pattern (str \"^\" word-so-far))\n              is-full-word? (words word-so-far)\n              is-partial-word? (some #(re-find partial-word-re %) words-vec)\n              unchecked-neighbors (apply disj (neighbors (last path)) path)\n              potential-paths (mapv #(conj path %) unchecked-neighbors)]\n          (recur (if is-partial-word?\n                   (apply conj (pop to-check) potential-paths)     ;; keep searching down this path if it might be a word\n                   (pop to-check))                                 ;; if not, abandon this path and go back to the rest\n                 (if is-full-word?\n                   (conj found-words path)\n                   found-words)))))))\n\n\n(defn run-scoring! []\n  (let [longest-paths-from-each-tile (for [x (range grid-cols)\n                                           y (range grid-rows)]\n                                       (->> (words-reachable-from x y)\n                                            (sort-by count >)\n                                            first))\n        longest-words-with-paths (->> longest-paths-from-each-tile\n                                      (remove nil?)\n                                      (map #(vector (path-to-word %) %)))]\n    (swap! state assoc\n           :remaining-words longest-words-with-paths\n           :game-state :done)))\n\n\n\n  ;; NOTE: this should be called only on a setTimeout, as a next step action after post-word-submit grid update\n(defn after-advancing-turn! []\n  (if (= game-turns (count (@state :found-words)))\n    (do\n      (swap! state assoc :game-state :scoring)\n      (js/setTimeout run-scoring! 1000))\n\n    (swap! state (fn [old]\n                   (-> old\n                       (assoc :game-state :selecting-tiles)\n                       (assoc :grid (mapv (partial mapv #(assoc % :state :default)) (old :grid))))))))\n\n\n\n;; NOTE: this should be called only on a setTimeout, as a next step action after word submit\n(defn after-submitting-word! []\n  (do\n    (swap! state (fn [old]\n                   (let [gone (into #{} (map #(vector (% :x) (% :y)) (@state :selected-grid-spaces)))]\n                     (-> old\n                         (assoc :grid (-> (old :grid)\n                                          (remove-selected-spaces-from-grid gone)\n                                          (add-tiles-from-reserve (old :reserve-grid) gone)))\n                         (assoc :game-state :advancing-turn)\n                         (assoc :selected-grid-spaces [])\n                         (update :reserve-grid remove-tiles-from-reserve gone)))))\n    (js/setTimeout after-advancing-turn! 600)))\n\n\n\n(defn submit-word! []\n  (let [maybe-word (tiles-to-string (@state :selected-grid-spaces))]\n    (if (words maybe-word)\n      (do\n        (swap! state (fn [old]\n                       (-> old\n                           (update :found-words conj maybe-word)\n                           (assoc :game-state :submitting-word))))\n        (js/setTimeout after-submitting-word! 470))\n\n      (swap! state assoc :bad-guess? true))))\n\n\n(defn tile-action! [{:keys [x y tile]}]\n  (let [selected-grid-space {:x x :y y :letter (tile :letter)}]\n    (when (= :selecting-tiles (@state :game-state))\n      (if (is-selected? selected-grid-space)\n        (if (= selected-grid-space (last (@state :selected-grid-spaces)))\n\n          ;; if you click the last selected tile again, submit the word\n          (submit-word!)\n\n          ;; if you click a selected tile in the middle of the chain, revert selection to it\n          (swap! state (fn [old]\n                         (let [new-selected (conj (->> (old :selected-grid-spaces)\n                                                       (take-while #(not (= % selected-grid-space)))\n                                                       (into []))\n                                                  selected-grid-space)]\n                           (assoc old :selected-grid-spaces new-selected\n                                  :bad-guess? false)))))\n\n        (if (is-legal-selection? x y)\n\n          ;; if you click an unselected tile, select it if it's a valid selection!\n          (swap! state (fn [old]\n                         (assoc old\n                                :selected-grid-spaces\n                                (conj (old :selected-grid-spaces) selected-grid-space)\n                                :bad-guess? false)))\n\n          ;; if you click an unselected tile that's *not* a valid selection, deselect all!\n          (swap! state assoc :selected-grid-spaces [] :bad-guess? false))))))\n\n\n;;\n;; UI components\n;;\n\n(declare letter-tile)\n(declare word-in-progress)\n(declare found-words)\n\n\n(defn main []\n  [:div\n   [:h1 \"Counterspell!!!\"]\n   [:h6 (str \"(seed: \" (@state :random-seed) \")\")]\n   [:div {:style {:display \"flex\"\n                  :flex-direction \"row\"}}\n    [:div\n     [:div {:comment \"the letter grid\"\n            :style {:display \"flex\"}}\n      (for [[grid-x col] (with-index (@state :grid))]\n        [:div {:comment \"one column of tiles\"\n               :key grid-x\n               :style {:background \"blue\"\n                       :display \"flex\"\n                       :flex-direction \"column-reverse\"\n                       :align-items \"center\"}}\n         (for [[grid-y tile] (with-index col)]\n           [letter-tile {:key grid-y\n                         :tile tile\n                         :grid-x grid-x\n                         :grid-y grid-y}])])]\n     [word-in-progress]]\n    [found-words]]])\n\n\n(defn letter-tile [{:keys [tile grid-x grid-y]}]\n  [:div {:comment \"a single letter tile\"\n         :class \"letter-tile\"\n         :style (merge {:padding \"1rem\"\n                        :width \"100%\"}\n                       (if (is-selected? {:x grid-x :y grid-y})\n                         {:border \"1px solid red\"\n                          :background-color \"#fbb\"\n                          :animation (when (= :submitting-word (@state :game-state))\n                                       \"fade-out forwards 0.5s\")}\n                         {:border \"1px solid black\"})\n                       (when (and (= :falling-in (tile :state))\n                                  (= :advancing-turn (@state :game-state)))\n                         {:animation \"0.5s forwards fall-in\"}))\n         :on-click #(tile-action! {:x grid-x :y grid-y :tile tile})}\n   (.toUpperCase (tile :letter))])\n\n\n(defn word-in-progress []\n  (let [maybe-word (tiles-to-string (@state :selected-grid-spaces))]\n    [:div {:comment \"the currently-being-spelled word\"\n           :style {:padding \"1rem\"\n                   :font-size \"200%\"}\n           :class (when (@state :bad-guess?) \"naughty\")}\n     [:h2 maybe-word]]))\n\n\n(defn found-words []\n  [:div {:style {:margin-left \"1rem\"}}\n   [:h2 \"Found words:\"]\n   [:ul\n    (for [word (@state :found-words)]\n      [:li word])]\n   (when (= :scoring (@state :game-state))\n     [:<>\n      [:hr]\n      [:h2 \"Scoring. This is a little slow, stand by...\"]])\n   (when (= :done (@state :game-state))\n     [:<>\n      [:hr]\n      [:h2 \"Words remaining on board:\"]\n      [:table\n       [:tbody\n        (for [word (map first (@state :remaining-words))]\n          [:tr\n           [:td word]\n           [:td (score-word word)]])]]\n      [:hr]\n      [:h2 \"Final score (lower is better)\"]\n      [:h3 (->> (@state :remaining-words) (map first) (map score-word) (apply +))]\n      [:div\n       [:a {:href \"#\"\n            :on-click #(.reload js/location)} \"Try this board again\"]]\n      [:div\n       [:a {:href \"#\"\n            :on-click #(do (set! js/location.hash \"\")\n                           (.reload js/location))} \"Try a new random board\"]]\n      [:div\n       [:a {:href (str (.-origin js/location) (.-pathname js/location) (.-hash js/location))}\n        \"Copy this link to challenge someone else to the same board.\"]]])])\n\n\n(defonce root (rdom/create-root (.querySelector js/document \"#root\")))\n\n(defn\n  ^:dev/after-load\n  init\n  []\n  (let [url-seed (->> (.-hash js/location)\n                      (drop 1)\n                      (apply str)\n                      (parse-long))\n        seed (or url-seed (rand-int 10000))]\n    (set! js/location.hash seed)\n    (init-game seed)\n    (rdom/render root [main])))\n"]}