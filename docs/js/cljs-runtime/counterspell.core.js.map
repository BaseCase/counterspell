{"version":3,"sources":["counterspell/core.cljs"],"mappings":"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","names":["counterspell.core/index","coll","cljs.core.map_indexed","cljs.core/vector","counterspell.core/game-turns","counterspell.core/grid-rows","counterspell.core/grid-cols","counterspell.core/create-letter-generator","seed","alphabet","cljs.core.repeatedly","cljs.core/rand-nth","counterspell.core/letters","counterspell.core/generate-game-grid","height","cljs.core.take","cljs.core.partition","counterspell.core/possible-game-states","counterspell.core/state","reagent.core.atom","counterspell.core/upon-animation","animation-name","f","js/document","evt","cljs.core._EQ_","counterspell.core/upon-transition","property-name","counterspell.core/update-grid-after-fall!","cljs.core.println","counterspell.core/fall-after-fade!","deleted","fexpr__22619","cljs.core/deref","deleted-tile-info","iter__5480__auto__","s__22621","cljs.core/LazySeq","temp__5804__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__5478__auto__","size__5479__auto__","cljs.core/count","b__22623","cljs.core/chunk-buffer","i__22622","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__22620","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","col","cljs.core.range","deleted-in-col","p1__22618#","cljs.core/filterv","highest-deleted","cljs.core.apply","cljs.core/max","cljs.core.map","cljs.core/second","cljs.core.swap_BANG_","cljs.core/merge","counterspell.core/tile-active?","x","y","cljs.core/some","fexpr__22624","counterspell.core/tiles-to-string","tiles","grid","cljs.core/str","p__22625","vec__22626","cljs.core.nth","counterspell.core/real-word?","s","counterspell.words/words","counterspell.core/submit-word!","word","cljs.core.merge","cljs.core.conj","counterspell.core/legal-tiles","temp__5802__auto__","tail","cljs.core/last","fexpr__22629","vec__22630","s__22634","xs__6360__auto__","iterys__5476__auto__","s__22636","b__22638","i__22637","iter__22635","fs__5477__auto__","cljs.core.concat","iter__22633","x'","y'","cljs.core/not","cljs.core/set","cljs.core.disj","s__22640","s__22642","b__22644","i__22643","iter__22641","iter__22639","counterspell.core/tile-action-at!","active-tiles","fexpr__22646","p1__22645#","cljs.core.take_while","cljs.core.into","G__22648","fexpr__22647","counterspell.core/tile-fall-distance","for-col","fexpr__22649","counterspell.core/tile-height-in-pixels","counterspell.core/falling-css","pixels","p__22650","map__22651","cljs.core/--destructure-map","cljs.core.get","counterspell.core/letter-tile","letter","activated?","deleting?","and__5000__auto__","fexpr__22652","fall-distance","fexpr__22653","fexpr__22654","counterspell.core/letter-grid","s__22656","b__22658","i__22657","vec__22659","iter__22655","vec__22672","letters","s__22663","b__22665","i__22664","vec__22666","iter__22662","vec__22669","s__22676","b__22678","i__22677","vec__22679","iter__22675","vec__22682","l","counterspell.core/building-word","fexpr__22685","fexpr__22686","mistake","fexpr__22687","counterspell.core/submitted-words","words","fexpr__22688","s__22690","b__22692","i__22691","iter__22689","counterspell.core/main","js/counterspell","js/counterspell.core","js/counterspell.core.root","counterspell.core/root","reagent.dom.client/create-root","counterspell.core/init","reagent.dom.client.render","cljs.core/chunk-first"],"sourcesContent":["(ns counterspell.core\n  (:require [reagent.dom.client :as rdom]\n            [reagent.core :as r]\n            [counterspell.words :refer [words]]))\n\n\n(defn index [coll] (map-indexed vector coll))\n\n\n\n;; TODO: how many turns should the game be?\n;; TODO: how big should the grid be?\n(def game-turns 3)\n(def grid-rows 5)\n(def grid-cols 4)\n\n;; TODO: figure out how to get seeds working\n(defn create-letter-generator [seed]\n  (let [alphabet \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"]\n    (repeatedly #(rand-nth alphabet))))\n\n(def letters (create-letter-generator nil))\n\n;; Gives us columns as a list of lists of letters\n;; We'll render the columns bottom to top; that is, first item is lowest of the screen.\n(defn generate-game-grid []\n  (let [height (* grid-rows (inc game-turns))]\n    (->> letters\n         (take (* height grid-cols))\n         (partition height))))\n\n(def possible-game-states #{:playing :tiles-deleting :tiles-falling})\n\n(def state (r/atom {:grid (generate-game-grid)\n                    :active-tiles []\n                    :not-a-real-word nil\n                    :submitted-words []\n                    :game-state :playing}))\n\n(defn upon-animation\n  \"register a one-time event listener for a given animation, and run function f when it happens\"\n  [animation-name f]\n  (.addEventListener js/document\n                     \"animationend\"\n                     (fn [evt]\n                       (if (= animation-name (.-animationName evt))\n                         (f)))\n                     #js {\"once\" true}))\n\n(defn upon-transition\n  \"register a one-time event listener for a given transition, and run function f when it happens\"\n  [property-name f]\n  (.addEventListener js/document\n                     \"transitionend\"\n                     (fn [evt]\n                       (if (= property-name (.-propertyName evt))\n                         (f)))\n                     #js {\"once\" true}))\n\n(defn update-grid-after-fall! []\n  (println \"start here\"))\n\n(defn fall-after-fade!\n  \"just-cleared tiles have finished fading out, so start column gravity animation\"\n  []\n  (let [deleted (@state :active-tiles)\n        deleted-tile-info (for [col (range grid-cols)]\n                            (let [deleted-in-col (filterv #(= col (first %)) deleted)\n                                  highest-deleted (apply max (map second deleted-in-col))]\n                              {:column col\n                               :deleted (count deleted-in-col)\n                               :top-row-deleted highest-deleted}))]\n    (do\n      (swap! state merge {:deleted-tile-info deleted-tile-info\n                          :game-state :tiles-falling})\n      (upon-transition \"transform\" update-grid-after-fall!))))\n\n\n(defn tile-active? [x y]\n  (some #{[x y]} (@state :active-tiles)))\n\n\n(defn tiles-to-string [tiles grid]\n  (apply str (map (fn [[x y]]\n                    (nth (nth grid x) y))\n                  tiles)))\n\n(defn real-word? [s]\n  (words s))\n\n(defn submit-word! [tiles]\n  (swap! state (fn [s]\n                 (let [word (.toLowerCase (tiles-to-string tiles (s :grid)))]\n                   (if (real-word? word)\n                     (do\n                       (upon-animation \"deleting\" fall-after-fade!)\n                       (merge s {:submitted-words (conj (s :submitted-words) word)\n                                 :game-state :tiles-deleting}))\n                     (merge s {:not-a-real-word word}))))))\n\n(defn legal-tiles []\n  (if-let [tail (last (@state :active-tiles))]\n    ;; if we have an active selection, legal tiles are any inactive tiles adjacent to the tail\n    (let [[x y] tail]\n      (-> (for [x' (range (dec x) (+ 2 x))\n                y' (range (dec y) (+ 2 y))]\n            (when (and (not (tile-active? x' y'))\n                       (<= 0 x')\n                       (<= 0 y')\n                       (< x' grid-cols)\n                       (< y' grid-rows))\n              [x' y']))\n          set\n          (disj nil)))\n    ;; if there is no selection, any tile is a legal move\n    (-> (for [x (range grid-cols)\n              y (range grid-rows)]\n          [x y])\n        set)))\n\n(defn tile-action-at! [x y]\n  \"takes coords of a clicked tile and figures out what to do with it: update active selection and maybe submit a word.\"\n  (let [active-tiles (@state :active-tiles)]\n    (if (tile-active? x y)\n      (if (= [x y] (last active-tiles))\n        ;; if you click the last tile twice, submit it as a word\n        (submit-word! active-tiles)\n        ;; if you click the active chain somewhere in its middle, deselect anything past that\n        (swap! state (fn [s]\n                       (merge s {:active-tiles (conj (->> active-tiles\n                                                          (take-while #(not (= % [x y])))\n                                                          (into []))\n                                                     [x y])\n                                 :not-a-real-word nil}))))\n      (if ((legal-tiles) [x y])\n        ;; if this tile is inactive and valid, activate it!\n        (swap! state (fn [s]\n                       (merge s {:active-tiles (conj active-tiles [x y])\n                                 :not-a-real-word nil})))\n        ;; if you click an invalid inactive tile, reset the selection\n        (swap! state (fn [s]\n                       (merge s {:active-tiles []\n                                 :not-a-real-word nil})))))))\n\n(defn tile-fall-distance [x y]\n  (let [for-col (nth (@state :deleted-tile-info) x)]\n    (if (> y (:top-row-deleted for-col))\n      (:deleted for-col)\n      nil)))\n\n;;\n;; ui components\n;;\n\n(defn tile-height-in-pixels []\n  (.-offsetHeight\n   (.querySelector js/document \".letter\")))\n\n(defn falling-css [pixels]\n  (str \"translate3D(0, \" pixels \"px, 0)\"))\n\n(defn letter-tile [{:keys [letter x y]}]\n  (let [activated? (tile-active? x y)\n        deleting? (and activated? (= :tiles-deleting (@state :game-state)))\n        fall-distance (and (= :tiles-falling (@state :game-state))\n                           (tile-fall-distance x y))]\n    [:div.letter {:class [(when activated? \"active\")\n                          (when deleting? \"deleting\")\n                          (when fall-distance \"falling\")]\n                  :on-click #(when (= :playing (@state :game-state))\n                               (tile-action-at! x y))\n                  :style {:transform  (if fall-distance\n                                        (falling-css (* fall-distance (tile-height-in-pixels)))\n                                        \"none\")}\n                  }\n     letter]))\n\n\n(defn letter-grid []\n  (let [grid (:grid @state)]\n    [:div.letter-grid\n     (for [[x col] (index grid)]\n       (let [letters (take grid-rows col)]\n         [:div.column {:key x}\n          (for [[y l] (index letters)]\n            [letter-tile {:letter l :x x :y y\n                          :key (str l x y)}])]))]))\n\n(defn building-word []\n  (let [word (tiles-to-string (@state :active-tiles) (@state :grid))\n        mistake (@state :not-a-real-word)]\n    [:div.building-word\n     [:h3 word]\n     (when mistake\n       [:p.mistake (str mistake \" is not a word!\")])]))\n\n(defn submitted-words []\n  (let [words (@state :submitted-words)]\n    [:div.submitted-word\n     (for [word words]\n       [:h4 word])]))\n\n(defn main []\n  [:div\n   [:h1 \"Counterspell!!!\"]\n   [:div.game-board\n    [:div.play-area\n     [letter-grid]\n     [building-word]]\n    [:div.scoreboard\n     [submitted-words]]]])\n\n\n(defonce root (rdom/create-root (.querySelector js/document \"#root\")))\n\n(defn\n  ^:dev/after-load\n  init\n  []\n  (rdom/render root [main]))\n"]}