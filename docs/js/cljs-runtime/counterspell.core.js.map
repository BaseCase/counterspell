{"version":3,"sources":["counterspell/core.cljs"],"mappings":"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","names":["counterspell.core/index","coll","cljs.core.map_indexed","cljs.core/vector","counterspell.core/game-turns","counterspell.core/grid-rows","counterspell.core/grid-cols","counterspell.core/create-letter-generator","seed","alphabet","cljs.core.repeatedly","cljs.core/rand-nth","counterspell.core/letters","counterspell.core/generate-game-grid","height","cljs.core.take","cljs.core.partition","counterspell.core/possible-game-states","counterspell.core/state","reagent.core.atom","counterspell.core/tile-active?","x","y","cljs.core/some","fexpr__22468","cljs.core/deref","counterspell.core/tiles-to-string","tiles","grid","cljs.core.apply","cljs.core/str","cljs.core.map","p__22469","vec__22470","cljs.core.nth","counterspell.core/real-word?","s","counterspell.core.words/words","counterspell.core/submit-word!","cljs.core.swap_BANG_","word","cljs.core.merge","cljs.core.conj","counterspell.core/legal-tiles","temp__5802__auto__","tail","cljs.core/last","fexpr__22473","vec__22474","iter__5480__auto__","s__22478","cljs.core/LazySeq","temp__5804__auto__","cljs.core/seq","xs__6360__auto__","cljs.core/first","iterys__5476__auto__","s__22480","cljs.core/chunked-seq?","c__5478__auto__","size__5479__auto__","cljs.core/count","b__22482","cljs.core/chunk-buffer","i__22481","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__22479","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","fs__5477__auto__","cljs.core.concat","iter__22477","x'","cljs.core.range","y'","cljs.core/not","cljs.core/set","cljs.core.disj","s__22484","s__22486","b__22488","i__22487","iter__22485","iter__22483","counterspell.core/tile-action-at!","active-tiles","fexpr__22490","cljs.core._EQ_","p1__22489#","cljs.core.take_while","cljs.core.into","G__22492","fexpr__22491","p__22493","map__22494","cljs.core/--destructure-map","cljs.core.get","counterspell.core/letter-tile","letter","activated?","deleting?","and__5000__auto__","fexpr__22495","fexpr__22496","counterspell.core/letter-grid","s__22498","b__22500","i__22499","vec__22501","iter__22497","vec__22514","col","letters","s__22505","b__22507","i__22506","vec__22508","iter__22504","vec__22511","s__22518","b__22520","i__22519","vec__22521","iter__22517","vec__22524","l","counterspell.core/building-word","fexpr__22527","fexpr__22528","mistake","fexpr__22529","counterspell.core/submitted-words","words","fexpr__22530","s__22532","b__22534","i__22533","iter__22531","counterspell.core/main","js/counterspell","js/counterspell.core","js/counterspell.core.root","counterspell.core/root","reagent.dom.client/create-root","js/document","counterspell.core/init","reagent.dom.client.render","cljs.core/chunk-first"],"sourcesContent":["(ns counterspell.core\n  (:require [reagent.dom.client :as rdom]\n            [reagent.core :as r]\n            [counterspell.core.words :refer [words]]))\n\n\n(defn index [coll] (map-indexed vector coll))\n\n\n\n;; TODO: how many turns should the game be?\n;; TODO: how big should the grid be?\n(def game-turns 3)\n(def grid-rows 5)\n(def grid-cols 4)\n\n;; TODO: figure out how to get seeds working\n(defn create-letter-generator [seed]\n  (let [alphabet \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"]\n    (repeatedly #(rand-nth alphabet))))\n\n(def letters (create-letter-generator nil))\n\n;; Gives us columns as a list of lists of letters\n;; We'll render the columns bottom to top; that is, first item is lowest of the screen.\n(defn generate-game-grid []\n  (let [height (* grid-rows (inc game-turns))]\n    (->> letters\n         (take (* height grid-cols))\n         (partition height))))\n\n(def possible-game-states #{:playing :tiles-deleting})\n\n(def state (r/atom {:grid (generate-game-grid)\n                    :active-tiles []\n                    :not-a-real-word nil\n                    :submitted-words []\n                    :game-state :playing}))\n\n\n(defn tile-active? [x y]\n  (some #{[x y]} (@state :active-tiles)))\n\n(defn tiles-to-string [tiles grid]\n  (apply str (map (fn [[x y]]\n                    (nth (nth grid x) y))\n                  tiles)))\n\n(defn real-word? [s]\n  (words s))\n\n(defn submit-word! [tiles]\n  (swap! state (fn [s]\n                 (let [word (.toLowerCase (tiles-to-string tiles (s :grid)))]\n                   (if (real-word? word)\n                     (merge s {:submitted-words (conj (s :submitted-words) word)\n                               :game-state :tiles-deleting})\n                     (merge s {:not-a-real-word word}))))))\n\n(defn legal-tiles []\n  (if-let [tail (last (@state :active-tiles))]\n    ;; if we have an active selection, legal tiles are any inactive tiles adjacent to the tail\n    (let [[x y] tail]\n      (-> (for [x' (range (dec x) (+ 2 x))\n                y' (range (dec y) (+ 2 y))]\n            (when (and (not (tile-active? x' y'))\n                       (<= 0 x')\n                       (<= 0 y')\n                       (< x' grid-cols)\n                       (< y' grid-rows))\n              [x' y']))\n          set\n          (disj nil)))\n    ;; if there is no selection, any tile is a legal move\n    (-> (for [x (range grid-cols)\n              y (range grid-rows)]\n          [x y])\n        set)))\n\n(defn tile-action-at! [x y]\n  \"takes coords of a clicked tile and figures out what to do with it: update active selection and maybe submit a word.\"\n  (let [active-tiles (@state :active-tiles)]\n    (if (tile-active? x y)\n      (if (= [x y] (last active-tiles))\n        ;; if you click the last tile twice, submit it as a word\n        (submit-word! active-tiles)\n        ;; if you click the active chain somewhere in its middle, deselect anything past that\n        (swap! state (fn [s]\n                       (merge s {:active-tiles (conj (->> active-tiles\n                                                          (take-while #(not (= % [x y])))\n                                                          (into []))\n                                                     [x y])\n                                 :not-a-real-word nil}))))\n      (if ((legal-tiles) [x y])\n        ;; if this tile is inactive and valid, activate it!\n        (swap! state (fn [s]\n                       (merge s {:active-tiles (conj active-tiles [x y])\n                                 :not-a-real-word nil})))\n        ;; if you click an invalid inactive tile, reset the selection\n        (swap! state (fn [s]\n                       (merge s {:active-tiles []\n                                 :not-a-real-word nil})))))))\n\n;;\n;; ui components\n;;\n(defn letter-tile [{:keys [letter x y]}]\n  (let [activated? (tile-active? x y)\n        deleting? (and activated? (= :tiles-deleting (@state :game-state)))]\n    [:div.letter {:class [(when activated? \"active\") (when deleting? \"deleting\")]\n                  :on-click #(when (not (= :tiles-deleting (@state :game-state)))\n                               (tile-action-at! x y))}\n     letter]))\n\n\n(defn letter-grid []\n  (let [grid (:grid @state)]\n    [:div.letter-grid\n     (for [[x col] (index grid)]\n       (let [letters (take grid-rows col)]\n         [:div.column {:key x}\n          (for [[y l] (index letters)]\n            [letter-tile {:letter l :x x :y y\n                          :key (str l x y)}])]))]))\n\n(defn building-word []\n  (let [word (tiles-to-string (@state :active-tiles) (@state :grid))\n        mistake (@state :not-a-real-word)]\n    [:div.building-word\n     [:h3 word]\n     (when mistake\n       [:p.mistake (str mistake \" is not a word!\")])]))\n\n(defn submitted-words []\n  (let [words (@state :submitted-words)]\n    [:div.submitted-word\n     (for [word words]\n       [:h4 word])]))\n\n(defn main []\n  [:div\n   [:h1 \"Counterspell!!!\"]\n   [:div.game-board\n    [:div.play-area\n     [letter-grid]\n     [building-word]]\n    [:div.scoreboard\n     [submitted-words]]]])\n\n(defonce root (rdom/create-root (.querySelector js/document \"#root\")))\n\n(defn\n  ^:dev/after-load\n  init\n  []\n  (rdom/render root [main]))\n"]}